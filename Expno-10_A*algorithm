from queue import PriorityQueue
print(("lokesh192211069"))

# Define the graph as an adjacency list with (neighbor, cost)
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('D', 2), ('E', 5)],
    'C': [('F', 3)],
    'D': [('G', 2)],
    'E': [('G', 1)],
    'F': [('G', 2)],
    'G': []
}

# Heuristic values for each node (estimated cost to goal 'G')
heuristic = {
    'A': 7, 'B': 6, 'C': 5,
    'D': 4, 'E': 2, 'F': 3,
    'G': 0
}

def a_star(graph, start, goal, heuristic):
    open_list = PriorityQueue()
    open_list.put((0, start))
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while not open_list.empty():
        _, current = open_list.get()

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for neighbor, cost in graph[current]:
            temp_g = g_score[current] + cost
            if temp_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g
                f_score = temp_g + heuristic[neighbor]
                open_list.put((f_score, neighbor))

    return None

# Run the A* search
path = a_star(graph, 'A', 'G', heuristic)
print("Shortest path from A to G:", path)
