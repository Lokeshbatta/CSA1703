# Define the movements: up, down, left, right
print(("lokesh192211069"))
moves = {
    0: [1, 3],
    1: [0, 2, 4],
    2: [1, 5],
    3: [0, 4, 6],
    4: [1, 3, 5, 7],
    5: [2, 4, 8],
    6: [3, 7],
    7: [4, 6, 8],
    8: [5, 7]
}

def bfs(start):
    visited = set()
    queue = deque([(start, [])])

    while queue:
        state, path = queue.popleft()
        if state == goal_state:
            return path + [state]

        zero = state.index('0')
        for move in moves[zero]:
            new_state = list(state)
            new_state[zero], new_state[move] = new_state[move], new_state[zero]
            new_state_str = ''.join(new_state)
            if new_state_str not in visited:
                visited.add(new_state_str)
                queue.append((new_state_str, path + [state]))
    return None

# Example initial state (0 is blank)
initial_state = '123406758'

solution = bfs(initial_state)

if solution:
    print("Steps to solve:")
    for s in solution:
        print(s[0:3])
        print(s[3:6])
        print(s[6:9])
        print()
else:
    print("No solution found.")

    
