% ----------- GRAPH DEFINITION -----------

% edge(Node, Neighbor, Cost).
edge(a, b, 1).
edge(a, c, 3).
edge(b, d, 3).
edge(c, d, 1).
edge(b, e, 6).
edge(d, f, 2).
edge(e, f, 2).

% heuristic(Node, HeuristicCostToGoal).
heuristic(a, 6).
heuristic(b, 4).
heuristic(c, 4).
heuristic(d, 2).
heuristic(e, 3).
heuristic(f, 0).

% ----------- BEST FIRST SEARCH -----------

% best_first_search(Start, Goal, Path).
best_first_search(Start, Goal, Path) :-
    bfs([[Start]], Goal, Path).

% bfs(Queue, Goal, Path)
bfs([[Goal | Rest] | _], Goal, Path) :-
    reverse([Goal | Rest], Path).

bfs([[Current | Rest] | Others], Goal, Path) :-
    findall([Next, Current | Rest],
            (edge(Current, Next, _), \+ member(Next, [Current | Rest])),
            NextPaths),
    sort_by_heuristic(NextPaths, SortedNextPaths),
    append(SortedNextPaths, Others, NewQueue),
    bfs(NewQueue, Goal, Path).

% Sort paths based on heuristic of head node
sort_by_heuristic(Paths, Sorted) :-
    map_list_to_pairs(path_heuristic, Paths, Pairs),
    keysort(Pairs, SortedPairs),
    pairs_values(SortedPairs, Sorted).

% path_heuristic(Path, Heuristic)
path_heuristic([Node | _], H) :-
    heuristic(Node, H).

